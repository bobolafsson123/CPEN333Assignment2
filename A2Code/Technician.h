#pragma once
#include "Car.h"
#include "Recycling.h"
#include "Store.h"
#include "Garbage.h"
#include "JobSheet.h"
#include <string>
#include<iostream>
class Technician
{
private:
	Store* store;
	Car* car;
	Recycling* recycling;
	Garbage* garbage;

	void write(std::string message) {
		std::cout << "Technician: " << message << std::endl;
	}

public:
	Technician() {
		store = new Store();
		recycling = new Recycling();
		garbage = new Garbage();
	}

	//requires: car is not null
	//modifies: car
	//effect: oil,oil filter and air filter in car are swapped regardless of condition. Tires on car are swapped if worn, else rotated. Returns job sheet generated by service
	JobSheet service(Car& car) {
		JobSheet jobSheet;
		Oil newOil = store->getOil("type 90",4);
		jobSheet.addItem(1, 4, 200);
		bool newAirFilter = store->getAirFilter();
		jobSheet.addItem(2, 1, 20);
		bool newOilFilter = store->getOilFilter();
		jobSheet.addItem(3, 5, 6);
		Oil oldOil = car.swapOil(newOil);
		recycling->recycle(oldOil);
		jobSheet.addLabourItem("oilChange", 50);

		bool oldOilFilter = car.swapOilFilter(newOilFilter);
		garbage->dispose(oldOilFilter);
		jobSheet.addLabourItem("oilFilterChange", 30);

		bool oldAirFilter = car.swapAirFilter(newAirFilter);
		garbage->dispose(oldAirFilter);
		jobSheet.addLabourItem("AirFilterChange", 35);

		std::vector <bool> tireStatus = car.checkTiresForWear();//!!!



		write("finished servicing car but pretending it takes longer so customer can drink coffee");
		return jobSheet;
	}
};

